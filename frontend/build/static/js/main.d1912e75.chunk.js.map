{"version":3,"sources":["logo.svg","Home.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","class","React","Component","Login","state","value","handleSubmit","bind","event","preventDefault","onSubmit","this","type","name","App","className","href","src","logo","alt","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,gPCiB5BC,E,YAdX,WAAYC,GAAQ,qEACVA,I,sEAIN,OACI,yBAAKC,MAAM,QACP,4C,GARGC,IAAMC,W,QC2BVC,E,YA1BX,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KACDK,MAAQ,CAAEC,MAAO,IACtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHL,E,0EAMNC,GACTA,EAAMC,mB,+BAGN,OACI,yBAAKT,MAAM,QACP,qCACA,0BAAMU,SAAUC,KAAKL,cACjB,2BAAG,wCAAoB,6BACnB,2BAAOM,KAAK,OAAOC,KAAK,UAC5B,2BAAG,4CAAwB,6BACvB,2BAAOD,KAAK,WAAWC,KAAK,cAChC,2BAAOD,KAAK,SAASP,MAAM,c,GAnB3BJ,IAAMC,WC6BXY,MAxBf,WACE,OACE,kBAAC,IAAD,KACE,0BAAMC,UAAU,OACd,4BAAQA,UAAU,cAChB,uBAAGC,KAAK,KAAI,yBAAKC,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SAArD,sBAEF,2BAAOnB,MAAM,eACX,uBAAGgB,KAAK,UAAR,UAEF,6BAAShB,MAAM,oBACb,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,SAASC,UAAWnB,KAExC,4BAAQH,MAAM,cAAd,aCTYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d1912e75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div class=\"home\">\n                <h1>Welcome</h1>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n    render() {\n        return (\n            <div class=\"form\">\n                <h1>Login</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <p><label>Name:</label><br />\n                        <input type=\"text\" name=\"name\" /></p>\n                    <p><label>Password:</label><br />\n                        <input type=\"password\" name=\"password\" /></p>\n                    <input type=\"submit\" value=\"Go!\" />\n                </form>\n            </div>\n        );\n    }\n\n}\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home';\nimport Login from './Login';\n\nfunction App() {\n  return (\n    <Router>\n      <main className=\"app\">\n        <header className=\"app-header\">\n          <a href=\"/\"><img src={logo} className=\"app-logo\" alt=\"logo\" /> Timeline Tracker</a>\n        </header>\n        <aside class=\"app-sidebar\">\n          <a href=\"/login\">Login</a>\n        </aside>\n        <section class=\"app-main-section\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/login\" component={Login} />\n        </section>\n        <footer class=\"app-footer\">\n          footer\n        </footer>\n      </main>\n    </Router>\n  );\n}\nfunction login() {\n  //document.querySelector('.main-section').innerHTML = ;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}